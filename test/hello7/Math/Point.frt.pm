use warnings;use strict;use utf8;use 5.010;use lib 'lib';use Ferret;my$f=$Ferret::ferret||=Ferret->new;$Ferret::tried_files{'Point.frt.pm'}++;use Ferret::Core::Operations qw(add div);{my@funcs;my$scope=my$context=$f->get_context('Math');Ferret::space($context,$_)for qw(Math::Point);{my@methods;my$class=my$self=Ferret::Class->new($f,name=>'Point',version=>undef);my$proto=$class->prototype;$context->set_property(Point=>$class);{my$func=$methods[0]=Ferret::Function->new($f,name=>'_init_',is_method=>1);$func->add_argument(name=>'x');$func->add_argument(name=>'y');$func->{code}=sub{my($self,$arguments,$from_scope,$scope,$return)=@_;do{return if not defined$arguments->{x};$scope->set_property(x =>$arguments->{x});};do{return if not defined$arguments->{y};$scope->set_property(y=>$arguments->{y});};$self->set_property(x =>$scope->property('x'));$self->set_property(y=>$scope->property('y'));return$return;};}{my$func=$methods[1]=Ferret::Function->new($f,name=>'oneToRight',is_method=>1);$func->{code}=sub{my($self,$arguments,$from_scope,$scope,$return)=@_;$scope->set_property(pt=>$scope->{special}->property('class')->call([add($scope,$self->property('x'),Ferret::Number->new($f,value=>1)),$self->property('y')],$scope));return$scope->property('pt');return$return;};}{my$func=$methods[2]=Ferret::Function->new($f,name=>'pretty',is_method=>1);$func->{code}=sub{my($self,$arguments,$from_scope,$scope,$return)=@_;return add($scope,Ferret::String->new($f,value=>"("),$self->property('x'),Ferret::String->new($f,value=>", "),$self->property('y'),Ferret::String->new($f,value=>")"));return$return;};}{my$func=$methods[3]=Ferret::Function->new($f,name=>'midpoint',is_method=>1);$func->add_argument(name=>'pt1');$func->add_argument(name=>'pt2');$func->{code}=sub{my($self,$arguments,$from_scope,$scope,$return)=@_;do{return if not defined$arguments->{pt1};$scope->set_property(pt1=>$arguments->{pt1});};do{return if not defined$arguments->{pt2};$scope->set_property(pt2=>$arguments->{pt2});};return$scope->property('Point')->call({x =>div($scope,add($scope,$scope->property('pt1')->property('x'),$scope->property('pt2')->property('x')),Ferret::Number->new($f,value=>2)),y=>div($scope,add($scope,$scope->property('pt1')->property('y'),$scope->property('pt2')->property('y')),Ferret::Number->new($f,value=>2))},$scope);return$return;};}{my$method=$methods[0];$method->{class}=$class;$method->{outer_scope}=$scope;$class->set_property(_init_=>$method);}{my$method=$methods[1];$method->{class}=$class;$method->{outer_scope}=$scope;$proto->set_property(oneToRight=>$method);}{my$method=$methods[2];$method->{class}=$class;$method->{outer_scope}=$scope;$proto->set_property(pretty=>$method);}{my$method=$methods[3];$method->{class}=$class;$method->{outer_scope}=$scope;$class->set_property(midpoint=>$method);}}}