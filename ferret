#!/usr/bin/perl
# Copyright (c) 2015, Mitchell Cooper

use warnings;
use strict;
use 5.010;

use utf8;
use open ':std', ':encoding(UTF-8)';

use Cwd             'abs_path';
use File::Slurp     'slurp';
use File::Find      'find';
use File::Path      qw(make_path);
use Scalar::Util    'blessed';
use File::Basename  qw(fileparse basename dirname);
use JSON::XS        qw(decode_json);
use IO::Async::Function;
use IO::Async::Loop;
use Getopt::Long::Descriptive;

BEGIN {
    use FindBin;
    use lib 'lib';
    our $bin = $FindBin::Bin;
    use lib "$FindBin::Bin/lib";
    do '/etc/ferret.conf' or die "config error: ".($@ || $!)
}

use Ferret::Lexer;

my ($o, $usage) = describe_options(
    basename($0).' %o [file ...]',

    [], [ 'Build options:' ],
    [ 'beautify|p'      => 'beautify output code'                           ],
    [ 'minify|m'        => 'minify output code'                             ],
    [ 'noskip|n'        => 'do not skip unchanged files'                    ],
    [ 'synchronous|y'   => 'do not spawn worker processes'                  ],

    [], [ 'Verbosity:' ],
    [ 'tokens|t'        => 'write tokenization'                             ],
    [ 'dom|d'           => 'write lexer object tree (DOM)'                  ],
    [ 'verbose|v'       => 'print tokens/DOM (with -d/t)'                   ],

    [], [ 'Other actions:' ],
    [ 'run|r'   => 'run in interpeter mode'                                 ],
    [ 'clean|c' => 'clean up build files and exit', {implies => 'noskip'}   ],
    [ 'help|h'  => 'show usage and exit'                                    ]
);

# show help.
say($usage->text) and exit if $o->help;

my (
    $loop,          # IO::Async::Loop
    $function,      # IO::Async compile function
    $pending,       # number of files in progress
    $not_skipped,   # number of files that were NOT skipped
    @errors,        # postponed errors
    %done,          # files already done
    %metadata       # file-to-metadata map
);

# find the files.
my @files = @ARGV;
if (!@files) {
    find({ wanted => sub {
        my $f = $File::Find::name;
        if ($f =~ m/\.(frt|frtdoc)$/ ) {
            push @files, $f;
        }
    }, no_chdir => 1 }, '.');
}

die "No input files.\n"
    if !@files;

# only makes sense to do one file in run mode
die "Can't run multiple files.\n"
    if $o->run && @files > 1;

# do it synchronously.
if ($o->synchronous) {
    $pending = scalar @files;
    handle_result($_, 'return', do_file($_)) foreach @files;
}

# or asynchronously.
else {
    $loop = IO::Async::Loop->new;
    $function = IO::Async::Function->new(code => \&do_file);
    $loop->add($function);
    async_do_file($_) foreach @files;
    $loop->run;
}

sub status_n (@) {
    return if $o->run;
    print @_;
}

sub status (@) {
    status_n @_, "\n";
}

sub async_do_file {
    my $file = shift;
    $pending++;
    $function->call(
        args => [ $file ],
        on_result => sub { handle_result($file, @_) }
    );
}

sub next_result () {
    finish() if !--$pending;
}

sub handle_result {
    my ($file, $status, $ret) = @_;
    undef $ret if ref $ret ne 'HASH';
    
    # skipped
    return next_result if $ret && $ret->{skipped};
    $not_skipped++;

    # show stuff in verbose mode
    status "=== Tokenization ===\n$$ret{tokenization}"
        if ref $ret && length $ret->{tokenization};
    status "=== Document Model ===\n$$ret{construction}"
        if ref $ret && length $ret->{construction};

    status_n "[ $file ] " if !$o->synchronous;

    # bad exit status
    if ($status eq 'error') {
        status "ERROR";
        push @errors, [ $file, 'Process exited prematurely' ];
        return next_result;
    }

    # error
    if ($ret->{error}) {
        status "ERROR";
        push @errors, [ $file, $ret->{error} ];
        return next_result;
    }

    # cleaned
    if ($ret->{clean}) {
        status "CLEAN";
        return next_result;
    }

    # good status
    status "OK";

    return next_result;
}

sub finish {
    $loop->stop if $loop;

    # actually did something
    if ($not_skipped) {

        # show errors
        foreach my $error (@errors) {
            my ($file, $msg) = @$error;
            status "\n\n[ $file ]\n\n$msg";
        }

        my $e = scalar @errors || 'no';
        my $s = $e ne '1' ? 's' : '';
        status "\nCompilation completed with $e error$s.";
    }

    # all skipped
    else {
        status "No changes. Use $0 -n to force rebuild.";
    }

    # run
    run_file(shift @files) if $o->run;

    exit(@errors ? 1 : 0);
}

# returns {
#   file            => the input file path,
#   build           => the build directory,
#   pm              => the path to the .frt.pm file,
#   tokenization    => string of tokenization if -tv enabled,
#   construction    => model of dom if -dv enabled,
#   skipped         => true if the file was skipped
# }
sub do_file {
    my $file = shift;
    status_n "[ $file ] " if $o->synchronous;

    # split file into parts.
    my ($write_dir, $write_file);
    my ($name, $path, $ext) = fileparse($file, qr/\.[^.]*/);
    my $abs     = abs_path($file);
    my $is_docs = $ext eq '.frtdoc';
    my $ret     = { file => $file, abs => $abs };
    my %meta    = get_metadata($file);

    # writing to .md.
    if ($is_docs) {
        my $doc_dir = get_meta_dir(
            key         => 'doc_dir',
            file        => $file,
            fallback    => "${path}doc"
        );
        $write_dir      = $doc_dir;
        $write_file     = "$doc_dir/$name.md";
        $ret->{docs}    = $doc_dir;
        $ret->{md}      = $write_file;
    }

    # writing to .pm.
    else {
        my $build       = "${path}build";
        $write_dir      = $build;
        $write_file     = "$build/$name$ext.pm";
        $ret->{build}   = $build;
        $ret->{pm}      = $write_file;
    }

    # we might be able to skip this
    if (!$o->noskip) {
        my @stat1 = stat $write_file;
        my @stat2 = stat $file;
        if (@stat1 && $stat1[9] > $stat2[9]) {
            $ret->{skipped} = 1;
            return $ret;
        }
    }

    # clean.
    if ($o->clean) {
        error($ret, undef, $write_file, 'Clean');
        delete $ret->{error};
        $ret->{clean}++;
        return $ret;
    }

    # open the output file.
    my $fh;
    if (!-d $write_dir) {
        make_path($write_dir) or die "Couldn't create $write_dir";
    }
    open $fh, '>', $write_file
        or die "Couldn't open $write_file to write";
    binmode $fh, ':utf8';

    # see if we've already constructed it.
    my $main = $done{$abs};
    if (!$main) {

        # parse the input file.
        defined(my $str = eval { slurp($file, binmode => ':utf8') })
            or return error($ret, $fh, $write_file, $!);

        # tokenize.
        my ($err, @tok) = Ferret::Lexer::Tokenizer::tokenize("$str\n", $file);
        if ($o->tokens && !$err && !$is_docs) {
            my $tok = F::show_tok(@tok);
            print $fh "# === Tokenization ===\n";
            print $fh commentize($tok), "\n";
            $ret->{tokenization} = $tok if $o->verbose;
        }
        return error($ret, $fh, $write_file, $$err) if $err;

        # construct elements.
        $main = F::new('Main', name => $file);
        $err = Ferret::Lexer::Constructor::construct($main, @tok);
        if ($o->dom || $err) {
            my $dom = F::show_dom($main, 1);
            print $fh "# === Document Model ===\n"  if !$err && !$is_docs;
            print $fh commentize($dom), "\n"        if !$err && !$is_docs;
            $ret->{construction} = $dom if $o->verbose;
        }

        return error($ret, $fh, $write_file, $$err) if $err;
        $done{$abs} = $main;
    }

    # compile to Markdown.
    if ($is_docs) {
        require Ferret::Markdown;

        $main->{name} = $abs;
        my $markdown = $main->markdown_fmt_do;

        print $fh $markdown;
        close $fh;
    }

    # compile to Perl.
    else {
        require Ferret::Perl;

        my $compiled = $main->perl_fmt_do;
        beautify(\$compiled) if $o->beautify;
        minify(\$compiled)   if $o->minify;

        print $fh $compiled;
        close $fh;
    }

    return $ret;
}

sub perltidy {
    my ($ref, %opts) = @_;
    require Perl::Tidy;
    Perl::Tidy::perltidy(
        source      => $ref,
        destination => $ref,
        argv        => '',
        %opts
    );
}

sub beautify {
    my $ref = shift;
    perltidy($ref);
}

sub minify {
    my $ref = shift;
    perltidy($ref, argv => '--mangle -dac');
    $$ref =~ s/\n//g;
}

sub commentize {
    my @lines = split /\n/, join '', @_;
    return join("\n", map("# $_", @lines));
}

sub error {
    my ($ret, $fh, $output_file, $msg) = @_;
    close $fh if $fh;
    unlink $output_file if $output_file;
    $ret->{error} = 'Error: '.$msg;
    return $ret;
}

sub run_file {
    my $file = shift;
    my ($name, $path, $ext) = fileparse($file, qr/\.[^.]*/);
    exec 'perl', "${path}build/$name$ext.pm";
}

sub get_metadata {
    my $dir = dirname(shift);
    
    # metadata may be cached here
    if (my $meta = $metadata{$dir}) {
        return %$meta;
    }
    
    # nothing exists here; check the directory above
    my $meta_file = "$dir/ferret.json";
    return get_metadata($dir)
        if !-e $meta_file;
    
    # read JSON file
    my $slurped = slurp($meta_file);
    my $href    = eval { decode_json($slurped) };
    return if ref $href ne 'HASH';
    
    # cache
    $href->{dir} = $dir;
    $metadata{$dir} = $href;
    return %$href;
}

sub get_meta_dir {
    my %meta = @_;
    return $meta{fallback} if !length $meta{ $meta{key} };
    my $dir = join '/', grep length,
        $meta{dir},
        $meta{ $meta{key} },
        dirname($meta{file});
    return $dir;
}
