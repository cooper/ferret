#!/usr/bin/perl
# Copyright (c) 2014 Mitchell Cooper

use warnings;
use strict;
use 5.010;

use File::Slurp  'slurp';
use Scalar::Util 'blessed';
use JSON::XS;

BEGIN {
    use FindBin;
    use lib 'lib';
    our $bin = $FindBin::Bin;
    use lib "$FindBin::Bin/lib";
}

use Ferret;
use Ferret::Lexer;
use Ferret::Perl;

# parse arguments.
my ($args, @files) = '';
while ($_ = shift) {
    push @files, $_ and next unless /^-/;
    $args .= substr $_, 1;
}
my %args = map  { $_ => 1 } split //, $args;
@files   = grep { substr($_, -3) eq 'frt' } @files;

# show help.
help() if !@files || $args{h};

# handle each file.
do_file($_) foreach @files;

sub do_file {
    my $file = shift;
    say $file;

    # parse the file.
    my $str = eval { slurp($file) } or die "$!\n";

    # tokenize.
    my @tok = Ferret::Lexer::Tokenizer::tokenize($str);
    die "Error: ${$tok[0]}\n"
        if blessed $tok[0] && $tok[0]->isa('F::Error');
    show_tok(@tok) if $args{t};

    # construct elements.
    my $doc = F::Document->new(name => $file);
    my $err = Ferret::Lexer::Constructor::construct($doc, @tok);
    show_dom($doc) if $args{d};
    die "Error: $$err\n" if $err;

    # compile to Perl.
    my $compiled = Ferret::Perl::main($doc);
    if ($args{p}) {
        require Perl::Tidy;
        Perl::Tidy::perltidy(source => \$compiled, destination => \$compiled);
    }

    # open the file.
    my $fh;
    if ($args{s}) { $fh = \*STDOUT }
    else          { open $fh, '>', "$file.pm" }

    # write to file.
    print $fh $compiled;
    close $fh;

}

sub show_tok {
    state $json = JSON::XS->new->allow_nonref(1);
    foreach (@_) {
        my ($label, $value) = @$_;
        printf "%15s | %s\n",
            $label,
            defined $value ? $json->encode($value) : '';
    }
}

sub show_dom {
    state $indent = 0;
    my $el = shift;
    return if $el->type eq 'Unknown' && !$args{u};
    printf "%s %s\n", '    ' x $indent, $el->desc;
    return unless $el->is_node;
    $indent++;
        show_dom($_) foreach $el->children;
    $indent--;
}

sub help {
print "usage: $0 [-tdup] file [file ...]
-t      show tokenization
-d      show lexer object tree (DOM)
-u      show unknown elements in DOM
-s      write to STDOUT instead of file
-p      beautify code with perltidy
-h      show help
";
    exit 0;
}
