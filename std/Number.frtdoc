class Number
#< A number is a basic datatype for an arithmetical value which represents a
#| particular quantity. Numbers are useful for counting things and for
#| performing mathematical calculations.
#|
#| This class encompasses all sorts of
#| [real numbers](https://en.wikipedia.org/wiki/Real_number), including integers
#| and inexact floating-point values in the native architecture's
#| double-precision representation; as well as the
#| abstract concepts of [infinity](#inf) and [NaN](#nan).

#> Boolean evenness of the number
prop? even

#> Boolean oddness of the number
prop? odd

#> The nearest integer to the number
prop round

#> The smallest integer that is greater than or equal to the number
prop ceil

#> The greatest integer less than or equal to the number
prop floor

#> The square of the number (`n ^ 2`)
prop square

#> The square root of the number (`n ^ (1/2)`)
prop sqrt

#> The cube root of the number (`n ^ (1/3)`)
prop cbrt

#> Returns the Nth root of the number
method root {

    #> The root. For example, `3` is the cube root.
    need $root: Num

}

#> Returns the sum of the provided numbers
func sum {

    #> A group of numbers
    need $nums: Num...

}

#> Returns the product of the provied numbers
func product {

    #> A group of numbers
    need $nums: Num...

}

#> Returns the smallest of the provided numbers
func min {

    #> A group of numbers
    need $nums: Num...

}

#> Returns the largest of the provided numbers
func max {

    #> A group of numbers
    need $nums: Num...

}

#> An interface to which only even numbers conform
type Even {
    isa *class

    #> The number is even (`.even`)
    satisfies .even

}

#> An interface to which only odd numbers conform
type Odd {
    isa *class

    #> The number is odd (`.odd`)
    satisfies .odd

}

#> An interface which truncates floating point numbers to integers
type Integer {
    isa *class

    #> The number is truncated to its `.floor` value
    transform .floor

}

alias Int = Integer

#> The constant infinity
share $inf = Num("inf")

#> The constant NaN value (not a number)
share $nan = Num("nan")
