class Number
#< A number is a basic datatype for an arithmetical value which represents a
#| particular quantity. Numbers are useful for counting things and for
#| performing mathematical calculations.
#|
#| This class encompasses all sorts of
#| [real numbers](https://en.wikipedia.org/wiki/Real_number), including integers
#| and inexact floating-point values in the native architecture's
#| double-precision representation; as well as the more abstract concepts of
#| [infinity](#inf) and [NaN](#nan).
#|
#| The Number class is only concerned with real numbers, but Ferret has native
#| support for complex numbers as well through the [Complex](Complex.md) class.

#> Boolean evenness of the number
prop even

#> Boolean oddness of the number
prop odd

#> Nearest integer to the number.
#| Examples: `3.5` -> `4`, `3.4` -> `3`.
prop round

#> Smallest integer that is greater than or equal to the number.
#| Example: `3.001.ceil` -> `4`.
prop ceil

#> Greatest integer less than or equal to the number.
#| Example: `3.999` -> `3`.
prop floor

#> Square of the number (`n ^ 2`).
#| Example: `2.square` -> `4`.
prop square

#> Square root of the number (`n ^ (1/2)`).
#| Example: `4.sqrt` -> `2`.
prop sqrt

#> Cube root of the number (`n ^ (1/3)`).
#| Example: `8.cbrt` -> `2`.
prop cbrt

#> Nth root of the number.
#| Example: `8.root(3)` -> `2`.
method root {

    #> The root. For example, `3` is the cube root.
    need $root: Num
}

#> The number's factorial (`n!`). This can also be written `n!` because
#| "calling" a number yields its factorial. Non-integers are transformed with
#| `.floor`.
method factorial

#> An interface to which only even numbers conform
type Even {
    isa *class

    #> The number is even according to `.even`
    satisfies .even
}

#> An interface to which only odd numbers conform
type Odd {
    isa *class

    #> The number is odd according to `.odd`
    satisfies .odd
}

#> This interface promises an integer value, returning the `.floor` property
#| of floating-point numbers. Alias `Int` exists in the global context.
type Integer {
    isa *class

    #> The number is truncated to its `.floor` value
    transform .floor
}

alias Int = Integer

#> Infinity. Alias `Inf` exists in the global context.
share $Inf = Num("inf")

#> Not a number. Alias `NaN` exists in the global context.
share $NaN = Num("nan")
