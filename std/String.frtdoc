class String
#< A string is basic datatype which stores an arbitrary sequence of bytes,
#| typically representing characters. String literals are delimited by
#| double quotes, like so: `"The quick brown fox jumps over the lazy dog"`.

#> The length of the string
prop length

#> A string based on the original with an uppercase transformation
prop uppercase

#> A string based on the original with a lowercase transformation
prop lowercase

#> Returns a list of substrings based on the division of the original
#| string by the provided separator.
method split {

    #> the substring separator. The default is the empty string, which results
    #| in a list of individual characters.
    want $separator: Str|Rgx = ""

    #> the number of substrings to extract.
    #| If specified, the returned list will have at most this number
    #| of strings. The final string in that list may include occurrences
    #| of the separator.
    want $limit: Num

}

#> Returns a string based on the original string with placeholders within
#| the delimiters `<<` and `>>` replaced with the provided values.
#|
#| This method takes named arguments whose values should be strings or
#| objects capable of string conversion.
#|
#| `.fill()` will also respect indentation. If the provided values are
#| multi-line, they will be indented at the same depth as the placeholder.
#|
#| For example, `"Hi <<name>>!".fill(name: "Steve")` returns `"Hi Steve!"`.
#|
method fill {

    #> If provided, the keys and values in this hash will be used to
    #| fill the placeholders rather than the named argument pairs.
    want $valueHash: Hash

}

#> Looks for the provided substring at the beginning (left side) of the string.
#> Returns a boolean true value if the prefix exists.
method hasPrefix {

    #> the prefix to look for
    need $prefix: Str

}

#> Returns a string with the provided substring removed from the
#| beginning (left side) of the original string. If the string does not
#| have that prefix, a copy of the original string is returned.
method trimPrefix {

    #> the prefix to remove
    need $prefix: Str

}

#> Looks for the provided substring at the end (right side) of the string.
#> Returns a boolean true value if the suffix exists.
method hasSuffix {

    #> the suffix to look for
    need $suffix: Str

}

#> Returns a string with the provided substring removed from the
#| end (right side) of the original string. If the string does not
#| have that suffix, a copy of the original string is returned.
method trimSuffix {

    #> the suffix to remove
    need $suffix: Str

}

#> Concatenates strings.
#| See also the `List` method [`.join()`](List.md#join)
func join {

    #> A group of strings
    need $strs: Str...

}

#> An interface to which only non-empty strings comply.
type NonEmpty {

    #> The object is a string.
    isa *class

    #> The string length is not zero (`.length != 0`)
    satisfies .length != 0

}

#> Performs an uppercase transformation.
type Uppercase {

    #> The object is a string.
    isa *class

    #> The string transforms to an uppercase version (`.uppercase`)
    transform .uppercase

}

#> Performs a lowercase transformation.
type Lowercase {

    #> The object is a string.
    isa *class

    #> The string transforms to an lowercase version (`.lowercase`)
    transform .lowercase

}

alias NE = NonEmpty
alias UC = Uppercase
alias LC = Lowercase
